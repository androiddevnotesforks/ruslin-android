name: Build

on:
  push:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        fetch-depth: 0
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle
    - name: Set up uniffi-bindgen
      uses: baptiste0928/cargo-install@v1
      with:
        crate: uniffi_bindgen
        version: "0.22.0"
    - name: Run uniffi-bindgen
      run: uniffi-bindgen generate "${GITHUB_WORKSPACE}"/ruslin-data-uniffi/src/ruslin.udl --language kotlin --out-dir "${GITHUB_WORKSPACE}"/app/src/main/java
    # See https://github.com/Bromeon/godot-rust/blob/master/.github/workflows/full-ci.yml
    - name: Set up NDK
      run: |
        rustup target add aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android
        sudo apt-get update
        sudo apt-get install llvm-dev libclang-dev clang g++-multilib gcc-multilib libc6-dev libc6-dev-arm64-cross
    - name: "Find highest Android NDK version"
      run: |
        echo $ANDROID_SDK_ROOT
        ls $ANDROID_SDK_ROOT/ndk
        highestNdk=$(ls $ANDROID_SDK_ROOT/ndk | tail -n1)
        echo "Highest Android NDK: $highestNdk"
        echo "ANDROID_NDK_VERSION=$highestNdk" >> $GITHUB_ENV
    # See https://github.com/godot-rust/godot-rust/pull/920
    - name: "Found version ${{ env.ANDROID_NDK_VERSION }}. Workaround Rust bug..."
      run: find -L $ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION -name libunwind.a -execdir sh -c 'echo "INPUT(-lunwind)" > libgcc.a' \;
    - name: Build ruslin-data-uniffi
      working-directory: ./ruslin-data-uniffi
      run: |
        find $ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION -name "*clang"
        ANDROID_NDK_TOOLCHAIN_BIN=$ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION/toolchains/llvm/prebuilt/linux-x86_64/bin
        export AR=$ANDROID_NDK_TOOLCHAIN_BIN/llvm-ar

        echo "Building aarch64-linux-android"
        export CC=$ANDROID_NDK_TOOLCHAIN_BIN/aarch64-linux-android28-clang
        export CXX=$ANDROID_NDK_TOOLCHAIN_BIN/aarch64-linux-android28-clang++
        export CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=$ANDROID_NDK_TOOLCHAIN_BIN/aarch64-linux-android28-clang
        cargo build --target aarch64-linux-android --verbose --release
        mkdir -p ../app/src/main/jniLibs/arm64-v8a
        cp target/aarch64-linux-android/release/libuniffi_ruslin.so "${GITHUB_WORKSPACE}"/app/src/main/jniLibs/arm64-v8a

        echo "Building armv7-linux-androideabi"
        export CC=$ANDROID_NDK_TOOLCHAIN_BIN/armv7a-linux-androideabi28-clang
        export CXX=$ANDROID_NDK_TOOLCHAIN_BIN/armv7a-linux-androideabi28-clang++
        export CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=$ANDROID_NDK_TOOLCHAIN_BIN/armv7a-linux-androideabi28-clang
        cargo build --target armv7-linux-androideabi --verbose --release
        mkdir -p ../app/src/main/jniLibs/armeabi-v7a
        cp target/armv7-linux-androideabi/release/libuniffi_ruslin.so "${GITHUB_WORKSPACE}"/app/src/main/jniLibs/armeabi-v7a

        export ANDROID_NDK_VERSION=21.4.7075529
        ANDROID_NDK_TOOLCHAIN_BIN=$ANDROID_SDK_ROOT/ndk/$ANDROID_NDK_VERSION/toolchains/llvm/prebuilt/linux-x86_64/bin
        export AR=$ANDROID_NDK_TOOLCHAIN_BIN/llvm-ar

        echo "Building x86_64-linux-android"
        export CC=$ANDROID_NDK_TOOLCHAIN_BIN/x86_64-linux-android21-clang
        export CXX=$ANDROID_NDK_TOOLCHAIN_BIN/x86_64-linux-android21-clang++
        export CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER=$ANDROID_NDK_TOOLCHAIN_BIN/x86_64-linux-android21-clang
        cargo build --target x86_64-linux-android --verbose --release
        mkdir -p ../app/src/main/jniLibs/x86_64
        cp target/x86_64-linux-android/release/libuniffi_ruslin.so "${GITHUB_WORKSPACE}"/app/src/main/jniLibs/x86_64

        echo "Building i686-linux-android"
        export CC=$ANDROID_NDK_TOOLCHAIN_BIN/i686-linux-android21-clang
        export CXX=$ANDROID_NDK_TOOLCHAIN_BIN/i686-linux-android21-clang++
        export CARGO_TARGET_I686_LINUX_ANDROID_LINKER=$ANDROID_NDK_TOOLCHAIN_BIN/i686-linux-android21-clang
        cargo build --target i686-linux-android --verbose --release
        mkdir -p ../app/src/main/jniLibs/x86
        cp target/i686-linux-android/release/libuniffi_ruslin.so "${GITHUB_WORKSPACE}"/app/src/main/jniLibs/x86
        ls -lh "${GITHUB_WORKSPACE}"/app/src/main/jniLibs/*/*
    - name: Decode Keystore
      env:
        ENCODED_STRING: ${{ secrets.SIGNING_KEY }}
        SIGNING_KEY_ALIAS: ${{ secrets.ALIAS }}
        SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
      run: |
        TMP_KEYSTORE_FILE_PATH="${GITHUB_WORKSPACE}"/upload-keystore.jks
        echo $ENCODED_STRING | base64 --decode > "${TMP_KEYSTORE_FILE_PATH}"
        echo "storePassword=${SIGNING_STORE_PASSWORD}" >> "${GITHUB_WORKSPACE}"/keystore.properties
        echo "keyPassword=${SIGNING_KEY_PASSWORD}" >> "${GITHUB_WORKSPACE}"/keystore.properties
        echo "keyAlias=${SIGNING_KEY_ALIAS}" >> "${GITHUB_WORKSPACE}"/keystore.properties
        echo "storeFile=${TMP_KEYSTORE_FILE_PATH}" >> "${GITHUB_WORKSPACE}"/keystore.properties
    - name: Build signed APKs
      uses: gradle/gradle-build-action@v2
      with:
        arguments: assembleRelease
    - name: Build signed Android App Bundle
      uses: gradle/gradle-build-action@v2
      with:
        arguments: bundleRelease
    - name: Upload signed APKs & Android App Bundle
      uses: actions/upload-artifact@v3
      with:
        name: Signed APKs
        path: |
          app/build/outputs/apk/release/*.apk
          app/build/outputs/bundle/release/*.aab
          app/build/outputs/native-debug-symbols/release/*.zip
          app/build/outputs/mapping/release/*.txt
